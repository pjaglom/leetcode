#include <iostream>

#include <unordered_map>
#include <vector>

class Solution {
public:

    long long goodTriplets(std::vector<int>& nums1, std::vector<int>& nums2) {
        int length = nums1.size();
        std::unordered_map<int, int> nums1_dict;
        std::unordered_map<int, int> nums2_dict;
        for (int i = 0; i < length; i++) {
            nums1_dict[nums1[i]] = i;
            nums2_dict[nums2[i]] = i;
        }

        int count = 0;
        for (int j = 1; j < length - 1; j++) {
            for (int i = 0; i < j; i++) {
                int x = nums1[i];
                int y = nums1[j];
                if (nums2_dict[x] < nums2_dict[y]) {
                    for (int k = j + 1; k < length; k++) {
                        int z = nums1[k];
                        if (nums2_dict[y] < nums2_dict[z]) {
                            count++;;
                        }
                    }
                }
            }
        }
        return count;
    }
};

int main() {
    Solution solution;
    std::vector<int> ex1_nums1 = {2,0,1,3};
    std::vector<int> ex1_nums2 = {0,1,2,3};
    std::cout << "Example 1: " << solution.goodTriplets(ex1_nums1, ex1_nums2) << "\n";

    std::vector<int> ex2_nums1 = {4,0,1,3,2};
    std::vector<int> ex2_nums2 = {4,1,0,2,3};
    std::cout << "Example 2: " << solution.goodTriplets(ex2_nums1, ex2_nums2) << "\n";

    std::vector<int> ex3_nums1 = {58,71,203,329,328,280,13,202,326,106,366,53,30,463,190,149,51,105,135,199,151,34,50,406,378,130,422,375,182,425,334,446,360,18,397,128,124,341,22,17,418,101,79,162,259,457,76,215,255,72,161,367,258,318,178,113,361,19,370,225,415,461,386,88,9,278,382,146,127,32,268,459,98,403,68,450,194,198,115,346,300,176,206,67,331,272,353,311,131,212,424,25,297,129,247,134,253,267,338,393,14,120,38,310,365,240,242,271,302,210,345,277,291,29,184,303,394,239,254,4,223,398,243,479,39,482,100,431,369,219,145,413,87,264,333,16,460,172,332,224,364,173,426,336,400,92,237,487,485,147,158,296,107,452,236,321,411,230,119,116,467,372,227,383,470,417,48,170,440,216,179,42,290,359,281,226,171,83,245,476,235,287,229,374,282,33,44,218,195,15,103,31,472,214,187,455,275,458,85,91,133,112,213,442,192,325,464,93,439,250,350,416,228,448,90,137,489,273,419,368,380,78,466,63,315,111,435,252,114,96,64,2,305,292,3,35,362,420,10,447,157,289,337,390,220,69,433,47,59,469,110,65,234,480,249,410,428,456,402,474,23,197,462,66,304,52,61,385,357,262,475,285,478,251,308,313,488,232,342,465,73,260,156,427,123,352,269,324,188,241,54,392,407,43,471,483,82,144,274,388,56,454,148,150,283,379,244,322,344,349,248,167,358,45,24,299,211,159,340,351,432,37,126,347,295,319,317,348,138,174,180,484,95,377,26,89,323,429,443,257,436,399,477,286,21,140,373,481,217,118,183,473,191,99,307,276,288,306,486,136,339,412,152,404,125,266,330,153,356,293,28,55,376,175,284,108,141,434,409,395,142,414,0,233,468,263,256,246,20,231,437,444,430,163,320,80,169,238,181,200,207,77,143,208,314,294,327,270,196,185,205,57,117,371,132,75,7,164,49,122,221,139,186,70,363,391,41,189,11,222,60,46,1,12,36,309,209,265,94,5,62,6,121,421,343,312,387,102,165,193,97,301,177,408,104,423,449,81,354,384,316,40,27,401,155,166,204,168,261,355,441,86,438,453,74,381,279,160,405,335,451,109,298,389,154,201,445,8,396,84};
    std::vector<int> ex3_nums2 = {93,309,10,435,326,428,429,385,56,298,296,305,249,165,48,461,354,217,273,219,422,369,65,158,173,151,55,471,94,92,37,264,23,161,265,8,25,24,258,368,107,357,96,475,452,331,400,185,377,396,313,462,152,128,232,163,105,418,229,474,195,102,323,383,221,125,119,51,386,199,106,42,34,139,183,133,467,340,22,138,324,392,442,473,191,14,410,277,123,450,184,297,70,294,371,218,443,19,38,468,317,101,348,419,239,372,2,113,397,315,120,35,54,464,59,444,243,342,167,394,248,395,234,201,322,344,246,319,149,270,194,287,175,362,227,231,63,230,250,260,116,206,111,104,376,479,456,449,481,69,482,335,77,0,40,157,382,328,17,388,244,60,421,483,406,126,379,314,411,367,338,254,238,304,216,177,378,118,67,384,412,49,223,488,330,300,29,282,253,136,140,350,85,114,15,68,47,427,436,135,6,380,52,272,477,433,74,11,413,66,439,50,131,61,268,262,345,336,193,308,441,290,100,186,347,415,381,245,209,78,463,222,7,401,228,476,425,144,334,236,12,3,470,391,487,478,132,286,341,284,389,162,159,213,169,292,416,208,329,346,440,237,374,408,43,257,207,466,279,137,455,75,9,200,58,241,353,44,13,405,30,283,189,16,480,289,103,91,170,402,225,18,84,366,205,321,247,414,109,180,312,142,242,171,211,203,190,430,403,302,337,426,278,124,110,198,446,57,280,274,182,361,489,46,266,79,166,64,327,358,224,310,235,301,220,197,447,226,90,438,485,332,192,127,27,95,145,256,252,339,62,86,454,251,311,89,458,174,349,36,187,81,365,259,356,318,423,420,393,351,164,316,343,451,307,31,399,281,1,271,122,434,432,21,288,215,181,460,41,155,148,28,156,97,204,210,293,39,431,255,285,355,417,130,188,459,112,457,80,172,168,53,370,146,212,424,4,88,82,117,306,484,20,276,359,465,360,472,45,333,275,33,147,134,108,73,363,320,202,83,448,364,295,176,99,375,437,115,263,445,240,150,141,291,87,71,387,154,453,269,72,179,5,214,404,196,143,325,299,233,261,98,129,153,486,352,178,373,32,26,121,469,398,390,76,160,409,267,303,407};
    std::cout << "Example 3: " << solution.goodTriplets(ex3_nums1, ex3_nums2) << "\n";
}
